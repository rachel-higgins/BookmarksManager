Design Write-up and Test Plan
Rachel Higgins
CS260 Project 4

I will be implementing a binary search tree using the project 3 assignment as a template. I will be implementing the following functions recursively:
destroy(), add(), remove(const char key), remove(Website aWebsite), retrieve(), copy(), display(), edit(), and getTreeHeight().
The add function will place the first item at the root and every consequent item will be inserted to the right if the value is less than the item in the root node and consequent nodes as it moves down the tree or alternatively to the left if grater in value. This allows for efficient and fast retrieval as well as efficient use of memory. A parent node has two children nodes but because we my implementation is using pointer nodes, memory will only be allocated when an insertion has been requested. In the case that there are two items of equal value I have chosen to insert to the left of the first node that matches. Other functions that require traversing the node can quickly return find all the nodes of equal value such as the retrieval function.
The monitor aspect of the program will calculate the actual height of the tree by traversing recursively as far left until an empty leaf is reached and passing an integer starting at zero and being added to one everytime there is non empty node. Once null is reached the second integer parameter will compare it to the final integer count and the second integer (max) will be set to with which ever is greatest. As it moves back through the previous levels it will move to the right and then furthest left until another null node is reached. This recurrence will continue checking which integer is largest and the final result will be the maximum height of the tree. I will also calculate the maximum possible hight of the tree and minimum. The max is the number of items in the tree and the minimum is log2(n+1).
